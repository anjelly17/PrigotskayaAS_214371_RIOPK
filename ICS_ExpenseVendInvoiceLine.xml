<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ICS_ExpenseVendInvoiceLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ICS_ExpenseVendInvoiceLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find by RecId.
    /// </summary>
    /// <param name = "_recId"> RecId.</param>
    /// <param name = "_forUpdate"> For update.</param>
    /// <returns> The <c>ICS_ExpenseVendInvoiceLine</c> buffer.</returns>
    public static ICS_ExpenseVendInvoiceLine findByRecId(RecId          _recId,
                                                         boolean        _forUpdate = false)
    {
        ICS_ExpenseVendInvoiceLine vendInvoiceLine;

        if (_recId)
        {
            vendInvoiceLine.selectForUpdate (_forUpdate);

            select firstonly vendInvoiceLine
                where vendInvoiceLine.RecId == _recId;
        }

        return vendInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find by cost center.
    /// </summary>
    /// <param name = "_expenseVendInvoice"> Expense vendor invoice RecId.</param>
    /// <param name = "_departmnent"> Department.</param>
    /// <param name = "_costCenter"> Cost center.</param>
    /// <param name = "_businessUnit"> Business unit.</param>
    /// <param name = "_forUpdate"> For update.</param>
    /// <returns> The <c>ICS_ExpenseVendInvoiceLine</c> buffer.</returns>
    public static ICS_ExpenseVendInvoiceLine findByDimensions(  RefRecId        _expenseVendInvoice,                                                                
                                                                DimensionValue  _departmnent,
                                                                DimensionValue  _costCenter,
                                                                DimensionValue  _businessUnit,
                                                                boolean         _forUpdate  = false)
    {
        ICS_ExpenseVendInvoiceLine vendInvoiceLine;

        if (_expenseVendInvoice && _costCenter)
        {
            vendInvoiceLine.selectForUpdate (_forUpdate);

            select firstonly vendInvoiceLine
                where vendInvoiceLine.ExpenseVendInvoice    == _expenseVendInvoice
                    && vendInvoiceLine.Department           == _departmnent
                    && vendInvoiceLine.CostCenter           == _costCenter
                    && vendInvoiceLine.BusinessUnit         == _businessUnit;
        }

        return vendInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromExpenseRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize from expense request.
    /// </summary>
    /// <param name="_request">The <c>ICS_ExpenseVendInvoiceRequest</c> instance.</param>
    /// <param name="_newRecord">Is new record?</param>
    public void initFromExpenseRequest(ICS_ExpenseVendInvoiceRequest    _request,
                                        boolean                         _newRecord = true)
    {
        if (_newRecord
         || (!_newRecord
         &&  _request.parmAmountOrig() && _request.parmAmountOrig() != this.AmountOrig))
        {
            this.AmountOrig = _request.parmAmountOrig();
            this.setAmount();
        }


        if (_newRecord
         || (!_newRecord
         &&  _request.parmAmountAI() && _request.parmAmountAI() != this.AmountAI))
        {
            this.AmountAI = _request.parmAmountAI();
        }

        if (_newRecord
         || (!_newRecord
         &&  _request.parmCurrencyCode() && _request.parmCurrencyCode() != this.CurrencyCode))
        {
            this.CurrencyCode   = _request.parmCurrencyCode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize from the parent line.
    /// </summary>
    /// <param name = "_parentLine">The <t>ICS_ExpenseVendInvoiceLine</t> buffer.</param>
    public void initFromParentLine(ICS_ExpenseVendInvoiceLine  _parentLine)
    {
        this.ExpenseVendInvoice = _parentLine.ExpenseVendInvoice;
        this.CurrencyCode       = _parentLine.CurrencyCode;
        this.ParentLineRecId    = _parentLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByExpenseVendInvoiceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exists by Expense vendor invoice RecId.
    /// </summary>
    /// <param name = "_recId"> Expense vendor invoice RecId.</param>
    /// <returns> True if exists.</returns>
    public static boolean existByExpenseVendInvoiceRecId(RecId    _recId)
    {
        return _recId &&
            (select RecId from ICS_ExpenseVendInvoiceLine
                where ICS_ExpenseVendInvoiceLine.ExpenseVendInvoice == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete.
    /// </summary>
    public void delete()
    {
        RefRecId    parentRefRecId = this.ParentLineRecId;
        Amount      amount         = this.AmountOrig;   

        super();

        this.addAmount(parentRefRecId, amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAmount</Name>
				<Source><![CDATA[
    protected void addAmount(RefRecId _parentLineRecId, Amount _amount)
    {
        ICS_ExpenseVendInvoiceLine vendInvoiceLine = ICS_ExpenseVendInvoiceLine::findByRecId(_parentLineRecId, true);

        if (vendInvoiceLine)
        {
            vendInvoiceLine.AmountOrig += _amount;
            vendInvoiceLine.setAmount();

            if (!vendInvoiceLine.validateWrite())
            {
                throw error("@SYS21628");
            }

            vendInvoiceLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate delete.
    /// </summary>
    /// <returns> Boolean.</returns>
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();
    
        if (ret && this.ParentLineRecId == 0)
        {
            ret = checkFailed("@ICS:ParentRecordDeleteError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDepartment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cost center lookup
    /// </summary>
    /// <param name = "_formControl">Form control</param>
    public static void lookupDepartment(FormControl _formControl)
    {
        DimensionLookupParameters lookupParameters = new DimensionLookupParameters();
        lookupParameters.parmShowAll(NoYes::Yes);
        DimensionValueLookupHelper::lookupDimensionValues(DimensionAttribute::find(DimensionParameters::find().Dimension01_DLX), _formControl, curExt(), lookupParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCostCenter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cost center lookup
    /// </summary>
    /// <param name = "_formControl">Form control</param>
    public static void lookupCostCenter(FormControl _formControl)
    {
        DimensionLookupParameters lookupParameters = new DimensionLookupParameters();
        lookupParameters.parmShowAll(NoYes::Yes);
        DimensionValueLookupHelper::lookupDimensionValues(DimensionAttribute::find(DimensionParameters::find().Dimension02_DLX), _formControl, curExt(), lookupParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBusinessUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cost center lookup
    /// </summary>
    /// <param name = "_formControl">Form control</param>
    public static void lookupBusinessUnit(FormControl _formControl)
    {
        DimensionLookupParameters lookupParameters = new DimensionLookupParameters();
        lookupParameters.parmShowAll(NoYes::Yes);
        DimensionValueLookupHelper::lookupDimensionValues(DimensionAttribute::find(DimensionParameters::find().Dimension05_DLX), _formControl, curExt(), lookupParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayIsParentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays true if line is parent
    /// </summary>
    /// <returns>True if parent; otherwise - false</returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display ICS_ExpenseVendInvoiceLineParent displayIsParentLine()
    {
        ICS_ExpenseVendInvoiceLine line;

        select firstOnly RecId from line
            where line.ParentLineRecId == this.RecId;

        return line.RecId != 0 || this.ParentLineRecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLineNum</Name>
				<Source><![CDATA[
    public LineNum getNextLineNum()
    {
        ICS_ExpenseVendInvoiceLine invoiceLine;
        LineNum lineNum = 1;
        Level level = real2int(power(10, this.getParentLevel()));

        if (this.ParentLineRecId != 0)
        {
            select firstOnly maxof(LineNum) from invoiceLine
                where invoiceLine.ParentLineRecId == this.ParentLineRecId;

            lineNum = invoiceLine.LineNum + 1/level;

            if (invoiceLine.LineNum == 0)
            {
                lineNum += ICS_ExpenseVendInvoiceLine::findByRecId(this.ParentLineRecId).LineNum;
            }
        }

        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentLevel</Name>
				<Source><![CDATA[
    public Line getParentLevel()
    {
        ICS_ExpenseVendInvoiceLine  invoiceLine;
        Level                       level = 1;

        if (this.ParentLineRecId != 0)
        {
            invoiceLine = ICS_ExpenseVendInvoiceLine::findByRecId(this.ParentLineRecId);

            level += invoiceLine.getParentLevel();
        }

        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes record
    /// </summary>
    public void initValue()
    {
        super();

        this.LineNum = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record
    /// </summary>
    public void insert()
    {
        this.LineNum = this.getNextLineNum();
        
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates record
    /// </summary>
    public void update()
    {
        ICS_ExpenseVendInvoiceLine  lineOrig = this.orig();
        ICS_ExpenseVendInvoiceLine  lineUpd;
        boolean                     mergeLinesExist = false;
        boolean                     applyUpdate     = true;

        if(lineOrig.Department          || this.Department
            && lineOrig.CostCenter      || this.CostCenter
            && lineOrig.BusinessUnit    || this.BusinessUnit)
        {
            mergeLinesExist = ICS_ExpenseVendInvoiceLine::existMergeLines(this);

            if (FormDataUtil::isFormDataSource(this))
            {
                if (mergeLinesExist)
                {
                    if (Box::okCancel("@ICS:ExpenseVendInvoiceLineMergeInfo", DialogButton::Ok) == DialogButton::Cancel)
                    {
                        applyUpdate = false;
                    }
                    else
                    {
                        ICS_ExpenseVendInvoiceLine::mergeLines(this);

                        this.AmountOrig = 0;
                    }
                }
            }
        }

        if (applyUpdate)
        {
            super();

            if (mergeLinesExist)
            {
                this.delete();

                if (FormDataUtil::isFormDataSource(this))
                {
                    FormDataUtil::getFormDataSource(this).research();
                }
            }
            else
            {
                if ( lineOrig.ParentLineRecId   == nullValueBaseType(Types::Int64)
                    && lineOrig.CurrencyCode    != nullValueBaseType(Types::String)
                    && lineOrig.CurrencyCode    != this.CurrencyCode)
                {
                    update_recordset lineUpd
                        setting CurrencyCode = this.CurrencyCode
                        where lineUpd.ParentLineRecId == this.RecId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate field
    /// </summary>
    /// <param name = "_fieldIdToCheck">Field ID</param>
    /// <returns>True if validation is ok; otherwise - false</returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);

        switch(_fieldIdToCheck)
        {
            case fieldNum(ICS_ExpenseVendInvoiceLine, CurrencyCode):
                if (this.CurrencyCode == nullValueBaseType(Types::String))
                {
                    ret = checkFailed(strfmt("@SYS136411", fieldId2PName(tableNum(ICS_ExpenseVendInvoiceLine), _fieldIdToCheck)));
                }
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSplittedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the splitted line exist?
    /// </summary>
    /// <param name = "_recId"> Expense vendor invoice RecId.</param>
    /// <returns> True if exists.</returns>
    public static boolean existSplittedLine(RecId    _recId)
    {
        return _recId &&
            (select RecId from ICS_ExpenseVendInvoiceLine
                where ICS_ExpenseVendInvoiceLine.ExpenseVendInvoice == _recId
                  && ICS_ExpenseVendInvoiceLine.ParentLineRecId     != 0).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets amount without tax
    /// </summary>
    public void setAmount()
    {
        if (this.AmountOrig != 0)
        {
            this.Amount = CurrencyExchangeHelper::amount(this.AmountOrig / (1 + ICS_ExpenseVendInvoice::findByRecId(this.ExpenseVendInvoice).vendTaxValue()/100), this.CurrencyCode);
        }
        else
        {
            this.Amount = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modified field
    /// </summary>
    /// <param name = "_fieldId">Field ID</param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(ICS_ExpenseVendInvoiceLine, AmountOrig):
                this.setAmount();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDimensionDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates Default Dimension value
    /// </summary>
    /// <returns>Dimension default</returns>
    public DimensionDefault generateDimensionDefault()
    {
        DimensionAttributeValueSetStorage   valueSetStorage = new DimensionAttributeValueSetStorage();
        DimensionParameters                 dimParameters   = DimensionParameters::find();
        DimensionDefault                    result;
        DimensionAttribute                  dimensionAttribute;
        DimensionAttributeValue             dimensionAttributeValue;
        int                                 i;

    
        container               conAttr =
            [DimensionAttribute::find(dimParameters.Dimension01_DLX).Name,
            DimensionAttribute::find(dimParameters.Dimension02_DLX).Name,
            DimensionAttribute::find(dimParameters.Dimension05_DLX).Name];
        container               conValue =
            [this.Department,
            this.CostCenter,
            this.BusinessUnit];
    
        str                     dimValue;
    
        for (i = 1; i <= conLen(conAttr); i++)
        {
            dimensionAttribute = dimensionAttribute::findByName(conPeek(conAttr,i));
            if (dimensionAttribute.RecId == 0)
            {
                continue;
            }
            dimValue = conPeek(conValue,i);
            if (dimValue != nullValueBaseType(Types::String))
            {
                dimensionAttributeValue = dimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute,dimValue,false,true);
                valueSetStorage.addItem(dimensionAttributeValue);
            }
        }
    
        result = valueSetStorage.save();
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits Default Dimension from supplier
    /// </summary>
    /// <param name = "_mainContactWorker">Main contract worker Id</param>
    public void initDefaultDimensions(RefRecId _mainContactWorker)
    {
        DimensionParameters dimParameters = DimensionParameters::find();
        HcmEmployment       employment = HcmEmployment::getActiveEmploymentsByWorker(_mainContactWorker);
        TW_Profilo          ltabTW_Profilo;
        TW_UnitaPianta      ltabTW_UnitaPianta;
    
        select firstOnly ltabTW_Profilo
            order by DataInizio desc
            where ltabTW_Profilo.IdUtilizzatore == employment.TW_IdAnagrafico;

        ltabTW_UnitaPianta = TW_UnitaPianta::findByRecId(ltabTW_Profilo.IdPianta);

        this.Department = DLX_LedgerDimensionMgmt::getDimensionValue(ltabTW_UnitaPianta.DefaultDimension, dimParameters.Dimension01_DLX);
        this.CostCenter = DLX_LedgerDimensionMgmt::getDimensionValue(ltabTW_UnitaPianta.DefaultDimension, dimParameters.Dimension02_DLX);
        this.BusinessUnit = DLX_LedgerDimensionMgmt::getDimensionValue(ltabTW_UnitaPianta.DefaultDimension, dimParameters.Dimension05_DLX);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merge line 
    /// </summary>
    /// <param name = "_line">Source invoice line</param>
    public static void mergeLines(ICS_ExpenseVendInvoiceLine _line)
    {
        ICS_ExpenseVendInvoiceLine invoiceLine;
        
        select firstOnly forupdate invoiceLine
        where invoiceLine.ExpenseVendInvoice    == _line.expenseVendInvoice
            && invoiceLine.Department           == _line.Department
            && invoiceLine.CostCenter           == _line.CostCenter
            && invoiceLine.BusinessUnit         == _line.BusinessUnit
            && invoiceLine.RecId                != _line.RecId;

        if (invoiceLine.RecId)
        {
            invoiceLine.AmountOrig += _line.AmountOrig;
            invoiceLine.setAmount();

            if (!invoiceLine.validateWrite())
            {
                throw error("@SYS21628");
            }

            invoiceLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existMergeLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if line with equal dimension exists
    /// </summary>
    /// <param name = "_line">Source invoice line</param>
    /// <returns>True if line exists; otherwise - false</returns>
    public static boolean existMergeLines(ICS_ExpenseVendInvoiceLine _line)
    {
        ICS_ExpenseVendInvoiceLine invoiceLine;
        
        select firstonly RecId from invoiceLine
        where invoiceLine.ExpenseVendInvoice    == _line.expenseVendInvoice
            && invoiceLine.Department           == _line.Department
            && invoiceLine.CostCenter           == _line.CostCenter
            && invoiceLine.BusinessUnit         == _line.BusinessUnit
            && invoiceLine.RecId                != _line.RecId;

        return invoiceLine.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@ICS:ExpenseVendInvoiceLineDevDoc</DeveloperDocumentation>
	<Label>@ICS:ExpenseVendInvoiceLines</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>ExpenseVendInvoice</TitleField1>
	<TitleField2>ParentLineRecId</TitleField2>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExpenseVendInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentLineRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostCenter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountOrig</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountAI</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayIsParentLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BusinessUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Department</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS53072</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountOrig</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountAI</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS11696</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExpenseVendInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostCenter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountOrig</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountAI</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExpenseVendInvoice</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostCenter</Name>
			<ExtendedDataType>DimensionValue</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS13911</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ICS_AmountExTax</ExtendedDataType>
			<HelpText>@ICS:VendInvoiceAmountHelpTxt</HelpText>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<HelpText>@ICS:VendInvoiceCurrencyHelpTxt</HelpText>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ParentLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@ICS:ParentLineRecIdHelpTxt</HelpText>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@ICS:ParentLineRecId</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<ExtendedDataType>LineNum</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountOrig</Name>
			<ExtendedDataType>AmountCurPositive</ExtendedDataType>
			<HelpText>@ICS:VendInvoiceAmountHelpTxt</HelpText>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS98362</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BusinessUnit</Name>
			<ExtendedDataType>DimensionValue</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@ICS:BusinessUnitLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Department</Name>
			<ExtendedDataType>DimensionValue</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@ICS:DepartmentLabel</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountAI</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>AmountCurPositive</ExtendedDataType>
			<HelpText>@ICS:AmountAIHelpTxt</HelpText>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@ICS:AmountAI</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ParentLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParentLineRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ExpenseVendInvoice</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostCenter</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ExpenseVendInvoice</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DimIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ExpenseVendInvoice</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Department</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostCenter</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BusinessUnit</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ExpenseVendInvoice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<NavigationPropertyMethodNameOverride>ExpenseVendInvoice</NavigationPropertyMethodNameOverride>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ICS_ExpenseVendInvoice</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExpenseVendInvoice</Name>
					<Field>ExpenseVendInvoice</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ICS_ExpenseVendInvoiceLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ICS_ExpenseVendInvoiceLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParentLineRecId</Name>
					<Field>ParentLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DimAttributeOMCostCenter</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimAttributeOMCostCenter</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostCenter</Name>
					<Field>CostCenter</Field>
					<RelatedField>Value</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DimAttributeOMBusinessUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimAttributeOMBusinessUnit</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BusinessUnit</Name>
					<Field>BusinessUnit</Field>
					<RelatedField>Value</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DimAttributeOMDepartment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimAttributeOMDepartment</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Department</Name>
					<Field>Department</Field>
					<RelatedField>Value</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>